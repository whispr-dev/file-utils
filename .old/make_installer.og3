# make_installer_CLEAN.ps1 - NO SYNTAX ERRORS!

# Stop all the annoying prompts
$ProgressPreference = 'SilentlyContinue'
$ConfirmPreference = 'None'
$VerbosePreference = 'SilentlyContinue'
$ErrorActionPreference = 'Stop'

Write-Host "Building professional file-utils installer..." -ForegroundColor Green

####################
# STEP 0: Check Prerequisites
####################

Write-Host "Checking prerequisites..." -ForegroundColor Yellow

$requiredFiles = @(
    "7za.exe",
    "file-utils.exe", 
    "install.bat",
    "UNWISE.bat",
    "README",
    "LICENSE"
)

$missingFiles = @()
foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Write-Host "  Found: $file" -ForegroundColor Green
    } else {
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Host "ERROR: Missing required files:" -ForegroundColor Red
    $missingFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Red }
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host "All required files found!" -ForegroundColor Green

####################
# STEP 1: Create Archive
####################

Write-Host ""
Write-Host "Creating 7z archive..." -ForegroundColor Yellow

if (Test-Path "archive.7z") {
    Remove-Item "archive.7z" -Force
}

try {
    $result = Start-Process -FilePath ".\7za.exe" -ArgumentList "a", "-t7z", "archive.7z", "file-utils.exe", "README", "LICENSE", "docs\", "install.bat", "UNWISE.bat" -Wait -NoNewWindow -PassThru
    
    if ($result.ExitCode -eq 0) {
        $archiveSize = [math]::Round((Get-Item "archive.7z").Length / 1024, 1)
        Write-Host "Created archive.7z ($archiveSize KB)" -ForegroundColor Green
    } else {
        throw "7za.exe failed with exit code $($result.ExitCode)"
    }
} catch {
    Write-Host "Failed to create archive: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

####################
# STEP 2: Install ps2exe
####################

Write-Host ""
Write-Host "Checking ps2exe..." -ForegroundColor Yellow

try {
    if (-not (Get-Module -ListAvailable -Name ps2exe)) {
        Write-Host "Installing ps2exe module..." -ForegroundColor Yellow
        
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser | Out-Null
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module ps2exe -Scope CurrentUser -Force -AllowClobber
        
        Write-Host "ps2exe installed successfully" -ForegroundColor Green
    } else {
        Write-Host "ps2exe already available" -ForegroundColor Green
    }
} catch {
    Write-Host "Failed to install ps2exe: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

####################
# STEP 3: Create PowerShell Installer
####################

Write-Host ""
Write-Host "Creating PowerShell installer..." -ForegroundColor Yellow

$archiveBytes = [System.IO.File]::ReadAllBytes("archive.7z")
$base64Archive = [Convert]::ToBase64String($archiveBytes)

$7zaBytes = [System.IO.File]::ReadAllBytes("7za.exe")
$base647za = [Convert]::ToBase64String($7zaBytes)

$archiveKB = [math]::Round($archiveBytes.Length / 1024, 1)
$7zaKB = [math]::Round($7zaBytes.Length / 1024, 1)

Write-Host "Archive: $archiveKB KB, 7za.exe: $7zaKB KB" -ForegroundColor Cyan

$installerContent = @"
# file-utils Self-Extracting Installer v0.3.0

`$ProgressPreference = 'SilentlyContinue'
`$ErrorActionPreference = 'Stop'

Write-Host ""
Write-Host "=================================================================" -ForegroundColor Cyan
Write-Host "                    file-utils v0.3.0                          " -ForegroundColor Cyan
Write-Host "              Quantum-Enhanced File Security                    " -ForegroundColor Cyan
Write-Host "                   by whispr.dev                               " -ForegroundColor Cyan
Write-Host "=================================================================" -ForegroundColor Cyan
Write-Host ""

`$response = Read-Host "Install file-utils? (Y/N)"
if (`$response -notmatch "^[Yy]") {
    Write-Host "Installation cancelled." -ForegroundColor Yellow
    exit 0
}

Write-Host "Starting installation..." -ForegroundColor Green

`$tempDir = "`$env:TEMP\file-utils_install_`$(Get-Random)"
New-Item -ItemType Directory -Path `$tempDir -Force | Out-Null

try {
    Write-Host "Extracting files..." -ForegroundColor Yellow
    
    `$7zaData = "$base647za"
    `$7zaBytes = [Convert]::FromBase64String(`$7zaData)
    [System.IO.File]::WriteAllBytes("`$tempDir\7za.exe", `$7zaBytes)
    
    `$archiveData = "$base64Archive"
    `$archiveBytes = [Convert]::FromBase64String(`$archiveData)
    [System.IO.File]::WriteAllBytes("`$tempDir\package.7z", `$archiveBytes)
    
    Push-Location `$tempDir
    & ".\7za.exe" x "package.7z" -y | Out-Null
    Pop-Location
    
    if (`$LASTEXITCODE -ne 0) {
        throw "Failed to extract package"
    }
    
    Write-Host "Files extracted successfully" -ForegroundColor Green
    
    if (Test-Path "`$tempDir\install.bat") {
        Write-Host "Running installation..." -ForegroundColor Yellow
        Push-Location `$tempDir
        & ".\install.bat"
        Pop-Location
        Write-Host "Installation completed!" -ForegroundColor Green
    } else {
        Write-Host "install.bat not found" -ForegroundColor Red
    }
    
} catch {
    Write-Host "Installation failed: `$(`$_.Exception.Message)" -ForegroundColor Red
    exit 1
} finally {
    if (Test-Path `$tempDir) {
        Remove-Item `$tempDir -Recurse -Force -ErrorAction SilentlyContinue
    }
}

Write-Host ""
Write-Host "file-utils installation complete!" -ForegroundColor Green
Write-Host "Try: file-utils --help" -ForegroundColor Cyan
Read-Host "Press Enter to exit"
"@

$installerContent | Out-File -FilePath "file-utils_installer.ps1" -Encoding UTF8
Write-Host "Created file-utils_installer.ps1" -ForegroundColor Green

####################
# STEP 4: Convert to EXE - FIXED VERSION
####################

Write-Host ""
Write-Host "Converting PowerShell to EXE..." -ForegroundColor Yellow

try {
    Import-Module ps2exe -Force

    if (Test-Path "file-utils.ico") {
        Write-Host "Using custom icon: file-utils.ico" -ForegroundColor Cyan

            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            $outputFile = "file-utils_installer_$timestamp.exe"

        # FIXED: Use backticks for line continuation
        ps2exe `
            -inputFile "file-utils_installer.ps1" `
            -outputFile "file-utils_installer.exe" `
            -iconFile "file-utils.ico" `
            -title "file-utils Installer" `
            -description "Quantum-Enhanced File Security Tool Installer" `
            -company "whispr.dev" `
            -version "0.3.0" `
            -copyright "Copyright 2024 whispr.dev" `
            -product "file-utils" `
            -noConsole `
            -requireAdmin
    } else {
        ps2exe `
            -inputFile "file-utils_installer.ps1" `
            -outputFile "file-utils_installer.exe" `
            -title "file-utils Installer" `
            -description "Quantum-Enhanced File Security Tool Installer" `
            -company "whispr.dev" `
            -version "0.3.0" `
            -copyright "Copyright 2024 whispr.dev" `
            -product "file-utils" `
            -noConsole `
            -requireAdmin
    }
    
    if (Test-Path "file-utils_installer.exe") {
        $exeSize = [math]::Round((Get-Item "file-utils_installer.exe").Length / 1024 / 1024, 2)
        Write-Host "SUCCESS: Created file-utils_installer.exe ($exeSize MB)" -ForegroundColor Green
    } else {
        throw "ps2exe did not create output file"
    }
    
} catch {
    Write-Host "ps2exe conversion failed: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "Creating batch wrapper instead..." -ForegroundColor Yellow
    
    # Fallback: Create batch wrapper
    $batchWrapper = @"
@echo off
title file-utils Installer
cd /d "%~dp0"
echo Starting file-utils installer...
powershell -ExecutionPolicy Bypass -WindowStyle Normal -File "file-utils_installer.ps1"
pause
"@
    
    $batchWrapper | Out-File -FilePath "file-utils_installer.bat" -Encoding ASCII
    Write-Host "Created batch wrapper: file-utils_installer.bat" -ForegroundColor Green
}

####################
# STEP 5: Optional Cleanup
####################

Write-Host ""
$cleanup = Read-Host "Clean up temporary files? (Y/N)"
if ($cleanup -match "^[Yy]") {
    Write-Host "Cleaning up..." -ForegroundColor Yellow
    
    $cleanupFiles = @("archive.7z", "file-utils_installer.ps1")
    foreach ($file in $cleanupFiles) {
        if (Test-Path $file) {
            Remove-Item $file -Force
            Write-Host "Removed: $file" -ForegroundColor Gray
        }
    }
    
    Write-Host "Cleanup complete" -ForegroundColor Green
}

####################
# FINAL RESULTS
####################

Write-Host ""
Write-Host "=================================================================" -ForegroundColor Green
Write-Host "                        SUCCESS!                               " -ForegroundColor Green
Write-Host "=================================================================" -ForegroundColor Green
Write-Host ""

if (Test-Path "file-utils_installer.exe") {
    Write-Host "Created professional installer:" -ForegroundColor Cyan
    Write-Host "  file-utils_installer.exe" -ForegroundColor White
    Write-Host "  Custom icon embedded" -ForegroundColor White
    Write-Host "  Requires admin privileges" -ForegroundColor White
    Write-Host "  Double-clickable!" -ForegroundColor White
    Write-Host ""
    Write-Host "Test with: .\file-utils_installer.exe" -ForegroundColor Yellow
} else {
    Write-Host "PowerShell installer available:" -ForegroundColor Yellow
    Write-Host "  file-utils_installer.ps1" -ForegroundColor White
    Write-Host "Test with: .\file-utils_installer.ps1" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "Your professional installer is ready!" -ForegroundColor Green

$test = Read-Host "Test the installer now? (Y/N)"
if ($test -match "^[Yy]") {
    if (Test-Path "file-utils_installer.exe") {
        Write-Host "Launching installer..." -ForegroundColor Green
        Start-Process ".\file-utils_installer.exe"
    } else {
        Write-Host "Running PowerShell installer..." -ForegroundColor Green
        & ".\file-utils_installer.ps1"
    }
}

Write-Host "Build process complete!" -ForegroundColor Green